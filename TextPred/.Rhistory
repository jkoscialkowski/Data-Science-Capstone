CV <- cbind(CV_X[, i], CV_Y[, i])
head(CV)
plotList[[i]] <- qplot(x = CV[, 1], y = CV[, 2], geom = "point",
xlab = paste("CV_X", i), ylab = paste("CV_Y", i))
}
CV <- cbind(CV_X[, i], CV_Y[, i])
plotList <- vector("list", 6)
for (i in 1:6) {
CV <- cbind(CV_X[, i], CV_Y[, i])
print(head(CV))
plotList[[i]] <- qplot(x = CV[, 1], y = CV[, 2], geom = "point",
xlab = paste("CV_X", i), ylab = paste("CV_Y", i))
}
plotList <- vector("list", 6)
plotList[[1]]
for (i in 1:6) {
CV <- cbind(CV_X[, i], CV_Y[, i])
print(head(CV))
plotList[[i]] <- qplot(x = CV[, 1], y = CV[, 2], geom = "point",
xlab = paste("CV_X", i), ylab = paste("CV_Y", i))
}
data3 <- read.csv(file = "combo17.csv")
cca3 <- cca(x = data3[, 8:30], y = data3[, 2:7], xcenter = TRUE, ycenter = TRUE,
xscale = TRUE, yscale = TRUE)
CV_Y <- as.matrix(data3[, 2:7]) %*% as.matrix(cca3$ycoef)
CV_Y <- as.data.frame(CV_Y)
CV_X <- as.matrix(data3[, 8:30]) %*% as.matrix(cca3$xcoef)
CV_X <- as.data.frame(CV_X)
for (i in 1:6) {
CV <- cbind(CV_X[, i], CV_Y[, i])
print(head(CV))
plotList[[i]] <- qplot(x = CV[, 1], y = CV[, 2], geom = "point",
xlab = paste("CV_X", i), ylab = paste("CV_Y", i))
}
plotList[[1]]
qplot(x = CV_X[, 6], y = CV[, 6], geom = "point")
qplot(x = CV_X[, 6], y = CV_Y[, 6], geom = "point")
ggmatrix(plotList, nrow = 2, ncol = 3)
plotList <- vector("list", 6)
for (i in 1:1) {
CV <- cbind(CV_X[, i], CV_Y[, i])
print(head(CV))
plotList[[i]] <- qplot(x = CV[, 1], y = CV[, 2], geom = "point",
xlab = paste("CV_X", i), ylab = paste("CV_Y", i))
}
plotList[[1]]
for (i in 1:2) {
CV <- cbind(CV_X[, i], CV_Y[, i])
print(head(CV))
plotList[[i]] <- qplot(x = CV[, 1], y = CV[, 2], geom = "point",
xlab = paste("CV_X", i), ylab = paste("CV_Y", i))
}
plotList[[1]]
plotList[[2]]
ggmatrix(plotList, nrow = 2, ncol = 3)
CV_Y <- as.matrix(data3[, 2:7]) %*% as.matrix(cca3$ycoef)
CV_Y <- as.data.frame(CV_Y)
CV_X <- as.matrix(data3[, 8:30]) %*% as.matrix(cca3$xcoef)
CV_X <- as.data.frame(CV_X)
plotList <- vector("list", 6)
for (i in 1:2) {
CV <- cbind(CV_X[, i], CV_Y[, i])
print(head(CV))
plotList[[i]] <- qplot(x = CV[, 1], y = CV[, 2], geom = "point",
xlab = paste("CV_X", i), ylab = paste("CV_Y", i))
}
ggmatrix(plotList, nrow = 2, ncol = 3)
CV_Y <- as.matrix(data3[, 2:7]) %*% as.matrix(cca3$ycoef)
CV_Y <- as.data.frame(CV_Y)
CV_X <- as.matrix(data3[, 8:30]) %*% as.matrix(cca3$xcoef)
CV_X <- as.data.frame(CV_X)
plotList <- vector("list", 6)
for (i in 1:6) {
CV <- cbind(CV_X[, i], CV_Y[, i])
print(head(CV))
plotList[[i]] <- qplot(x = CV[, 1], y = CV[, 2], geom = "point",
xlab = paste("CV_X", i), ylab = paste("CV_Y", i))
}
ggmatrix(plotList, nrow = 2, ncol = 3)
plotList <- vector("list", 6)
for (i in 1:6) local({
i <- i
CV <- cbind(CV_X[, i], CV_Y[, i])
print(head(CV))
plotList[[i]] <<- qplot(x = CV[, 1], y = CV[, 2], geom = "point",
xlab = paste("CV_X", i), ylab = paste("CV_Y", i))
})
ggmatrix(plotList, nrow = 2, ncol = 3)
plotList[[1]]
ggmatrix(plotList, nrow = 2, ncol = 3, showStrips = TRUE)
CV_Y <- as.matrix(data3[, 2:7]) %*% as.matrix(cca3$ycoef)
CV_Y <- as.data.frame(CV_Y)
CV_X <- as.matrix(data3[, 8:30]) %*% as.matrix(cca3$xcoef)
CV_X <- as.data.frame(CV_X)
plotList <- vector("list", 6)
for (i in 1:6) local({
i <- i
CV <- cbind(CV_X[, i], CV_Y[, i])
print(head(CV))
plotList[[i]] <<- qplot(x = CV[, 1], y = CV[, 2], geom = "point",
xlab = paste("CV_X", i), ylab = paste("CV_Y", i))
})
ggmatrix(plotList, nrow = 2, ncol = 3, showStrips = TRUE)
install.packages("ggpubr")
library(ggpubr)
ggarrange(plotlist = plotList, ncol = 3)
ggarrange(plotlist = plotList, ncol = 3, nrow = 2)
outliers3 <- CV_Y[CV_Y$`CV 1` > -20 & CV_X$`CV 1` < 8 |
CV_X$`CV 3` < -15 |
CV_Y$`CV 4` > 4 |
CV_X$`CV 6` < 0, ]
outliers3
data3[rownames(outliers3), 2:7]
summary(data3[, 2:7])
data3[rownames(outliers3), 2:7]
summary(data3[, 2:7])
pchisq(cca3$chisq, cca3$df, lower.tail = FALSE)
cca3$corr
cca3$df
?cca
plotList <- vector("list", 6)
for (i in 1:6) local({
i <- i
CV <- cbind(CV_X[, i], CV_Y[, i])
print(head(CV))
plotList[[i]] <<- qplot(x = CV[, 1], y = CV[, 2], geom = "point",
xlab = paste("CV_X", i), ylab = paste("CV_Y", i)) + geom_smooth(method = "lm")
})
ggarrange(plotlist = plotList, ncol = 3, nrow = 2)
t.test(x = c(1,3,4,4,5), y = c(2,2,3,3,4)0)
t.test(x = c(1,3,4,4,5), y = c(2,2,3,3,4))
0.5 - 0.467
qt(.975, df = 8)
qt(.03, df = 8)
qt(.53, df = 8)
qt(0.03, df = 8, lower.tail = FALSE)
qt(0.467, df = 8, lower.tail = FALSE)
qt(0.467, df = 8)
t.test(x = c(1,3,4,4,5), y = c(2,2,3,3,4), var.equal = TRUE)
qt(.4609/2, df = 8, lower.tail = FALSE)
qf(.95, 50, 2400)
qf(.95, 1, 2400)
qf(.95, 1, 1200)
qf(.95, 1, 2317)
qf(.95, 50, 2317)
matrix <- matrix(rep(0, times = 10000*5), nrow = 10000)
matrix[, 1] <- rbinom(10000, 1, 0.6)
matrix[, 2] <- rbinom(10000, 1, (6 - matrix[, 1])/9)
matrix[, 3] <- rbinom(10000, 1, (6 - matrix[, 1] - matrix[, 2])/8)
matrix[, 2] <- rbinom(10000, 1, (6 - matrix[, 1] - matrix[, 2] - matrix[, 3])/7)
matrix[, 2] <- rbinom(10000, 1, (6 - matrix[, 1] - matrix[, 2] - matrix[, 3] - matrix[, 4])/6)
head(matrix)
sum(matrix[, 5] == 1)
matrix <- matrix(rep(0, times = 10000*5), nrow = 10000)
matrix[, 1] <- rbinom(10000, 1, 0.6)
matrix[, 2] <- rbinom(10000, 1, (6 - matrix[, 1])/9)
matrix[, 3] <- rbinom(10000, 1, (6 - matrix[, 1] - matrix[, 2])/8)
matrix[, 4] <- rbinom(10000, 1, (6 - matrix[, 1] - matrix[, 2] - matrix[, 3])/7)
matrix[, 5] <- rbinom(10000, 1, (6 - matrix[, 1] - matrix[, 2] - matrix[, 3] - matrix[, 4])/6)
sum(matrix[, 5] == 1)
head(matrix)
matrix <- matrix(rep(0, times = 10000*5), nrow = 10000)
matrix[, 1] <- rbinom(10000, 1, 0.6)
matrix[, 2] <- rbinom(10000, 1, (6 - matrix[, 1])/9)
matrix[, 3] <- rbinom(10000, 1, (6 - matrix[, 1] - matrix[, 2])/8)
matrix[, 4] <- rbinom(10000, 1, (6 - matrix[, 1] - matrix[, 2] - matrix[, 3])/7)
matrix[, 5] <- rbinom(10000, 1, (6 - matrix[, 1] - matrix[, 2] - matrix[, 3] - matrix[, 4])/6)
sum(matrix[, 1] == 1 & matrix[, 5] == 1)/sum(matrix[, 5] == 1)
matrix <- matrix(rep(0, times = 1000000*5), nrow = 1000000)
matrix[, 1] <- rbinom(1000000, 1, 0.6)
matrix[, 2] <- rbinom(1000000, 1, (6 - matrix[, 1])/9)
matrix[, 3] <- rbinom(1000000, 1, (6 - matrix[, 1] - matrix[, 2])/8)
matrix[, 4] <- rbinom(1000000, 1, (6 - matrix[, 1] - matrix[, 2] - matrix[, 3])/7)
matrix[, 5] <- rbinom(1000000, 1, (6 - matrix[, 1] - matrix[, 2] - matrix[, 3] - matrix[, 4])/6)
sum(matrix[, 1] == 1 & matrix[, 5] == 1)/sum(matrix[, 5] == 1)
5/9
# b)
sum(matrix[, 1] == 1 & rowSums(matrix) == 2)/sum(rowSums(matrix) == 2)
matrix <- matrix(rep(0, times = 10000000*5), nrow = 10000000)
matrix[, 1] <- rbinom(10000000, 1, 0.6)
matrix[, 2] <- rbinom(10000000, 1, (6 - matrix[, 1])/9)
matrix[, 3] <- rbinom(10000000, 1, (6 - matrix[, 1] - matrix[, 2])/8)
matrix[, 4] <- rbinom(10000000, 1, (6 - matrix[, 1] - matrix[, 2] - matrix[, 3])/7)
matrix[, 5] <- rbinom(10000000, 1, (6 - matrix[, 1] - matrix[, 2] - matrix[, 3] - matrix[, 4])/6)
# a)
sum(matrix[, 1] == 1 & matrix[, 5] == 1)/sum(matrix[, 5] == 1)
# b)
sum(matrix[, 1] == 1 & rowSums(matrix) == 2)/sum(rowSums(matrix) == 2)
choose(10,4)
choose(9,3)
210/84
40+180+144+20
30+240+360+120+6
384/2
756/3
192/14
192/16
252/16
252/6
192/6
252/9
28*5
32/42
0.6*2.5
25/42
280/7/8/9
View(matrix)
rm(matrix)
gc()
gc()
chuj dupa
knitr::opts_chunk$set(echo = TRUE)
library(DAAG)
library(readxl)
data2 <- read_xlsx(path = "bodyfat2.xlsx")
data2 <- data2[, -1]
# a)
library(GGally)
ggcorr(data2[,2:14], label = TRUE)
lm2 <- lm(bodyfat ~ ., data = data2)
summary(lm2)
lm2forward <- step(lm2, direction = "forward", trace = 0)
summary(lm2forward)
lm2backward <- step(lm2, direction = "backward", trace = 0)
summary(lm2backward)
data2 <- as.data.frame(data2)
vars2 <- colnames(data2[, -1])[order(abs(cor(data2)[-1,1]), decreasing = TRUE)]
loocvResult2 <- vector()
for (i in 1:2) {
pred <- cv.lm(data = data2[, c("bodyfat", vars2[1:i])], form.lm = bodyfat ~ .,
m = 252, printit = FALSE, plotit = FALSE)
loocvResult2 <- c(loocvResult2, (pred - data2$bodyfat)^2)
}
vars2
a <- cv.lm(data = data2, form.lm = bodyfat ~ ., m = 252)
warnings()
a <- cv.lm(data = data2, form.lm = bodyfat ~ ., m = 252, printit = FALSE)
a <- cv.lm(data = data2, form.lm = bodyfat ~ ., m = 252, printit = FALSE, plotit = FALSE)
for (i in 1:2) {
pred <- cv.lm(data = data2[, c("bodyfat", vars2[1:i])], form.lm = bodyfat ~ .,
m = 252, printit = FALSE)
loocvResult2 <- c(loocvResult2, (pred - data2$bodyfat)^2)
}
loocvResult2 <- vector()
for (i in 1:2) {
pred <- cv.lm(data = data2[, c("bodyfat", vars2[1:i])], form.lm = bodyfat ~ .,
m = 252, printit = FALSE)
loocvResult2 <- c(loocvResult2, sum((pred - data2$bodyfat)^2)/252)
}
a
for (i in 1:2) {
pred <- cv.lm(data = data2[, c("bodyfat", vars2[1:i])], form.lm = bodyfat ~ .,
m = 252, printit = FALSE)
loocvResult2 <- c(loocvResult2, sum((pred$cvpred - data2$bodyfat)^2)/252)
}
loocvResult2 <- vector()
for (i in 1:13) {
pred <- cv.lm(data = data2[, c("bodyfat", vars2[1:i])], form.lm = bodyfat ~ .,
m = 252, printit = FALSE)
loocvResult2 <- c(loocvResult2, sum((pred$cvpred - data2$bodyfat)^2)/252)
}
names(loocvResult2) <- vars2
loocvResult2
library(readxl)
data78 <- read_xlsx("primate.scapulae.xlsx")
data78 <- data78[, -9] # There were missing values for the gamma angle
dist7 <- dist(scale(data78[,2:8]), method = "euclidean")
head(data78)
library(caret)
data78[, 9]
levels(data78[, 0])
levels(data78[, 9])
data78[, 9]
as.vector(data78[, 9])
as.vector(data78[10:20, 9])
as.vector(data78[20:30, 9])
as.vector(data78[30:40, 9])
as.vector(data78[40:50, 9])
as.vector(data78[50:60, 9])
as.vector(data78[10:60, 9])
respHylo_8 <- data78[, 9]
respPongo_8 <- data78[, 9]
respPan_8 <- data78[, 9]
respGorilla_8 <- data78[, 9]
respHomo_8 <- data78[, 9]
respHylo_8[respHylo_8 != "Hylobates"] <- "Other"
respPongo_8[respPongo_8 != "Pongo"] <- "Other"
respPan_8[respPan_8 != "Pan"] <- "Other"
respGorilla_8[respGorilla_8 != "Gorilla"] <- "Other"
respHomo_8[respHomo_8 != "Homo"] <- "Other"
respGorilla_8
t(respGorilla_8)
t(respHylo_8)
lda1rest_8 <- train(x = data78[, 2:8], y = respHylo_8, method = "lda")
data78[, 2:8]
respHylo_8
lda1rest_8 <- train(x = data78[, 2:8], y = as.factor(respHylo_8), method = "lda")
data78 <- as.data.frame(data78)
respHylo_8 <- data78[, 9]
respPongo_8 <- data78[, 9]
respPan_8 <- data78[, 9]
respGorilla_8 <- data78[, 9]
respHomo_8 <- data78[, 9]
respHylo_8[respHylo_8 != "Hylobates"] <- "Other"
respPongo_8[respPongo_8 != "Pongo"] <- "Other"
respPan_8[respPan_8 != "Pan"] <- "Other"
respGorilla_8[respGorilla_8 != "Gorilla"] <- "Other"
respHomo_8[respHomo_8 != "Homo"] <- "Other"
lda1rest_8 <- train(x = data78[, 2:8], y = as.factor(respHylo_8), method = "lda")
lda1rest_8$method
lda1rest_8$modelInfo
lda1rest_8$results
lda1rest_8$pred
lda1rest_8$finalModel
lda2rest_8 <- train(x = data78[, 2:8], y = as.factor(respPongo_8), method = "lda")
lda3rest_8 <- train(x = data78[, 2:8], y = as.factor(respPan_8), method = "lda")
lda4rest_8 <- train(x = data78[, 2:8], y = as.factor(respGorilla_8), method = "lda")
lda5rest_8 <- train(x = data78[, 2:8], y = as.factor(respHomo_8), method = "lda")
predict(lda1rest_8, newdata = data78[,9])
predict(lda1rest_8, newdata = data78[,2:8])
preds1_8 <- sapply(list(lda1rest_8, lda2rest_8, lda3rest_8, lda4rest_8, lda5rest_8),
predict, newdata = data78[, 2:8])
preds1_8
preds1_8 <- apply(preds1_8, MARGIN = 1, FUN = intersect)
preds1_8 <- apply(X = preds1_8, MARGIN = 1, FUN = intersect)
preds1_8 <- apply(X = preds1_8, MARGIN = 1, FUN = unique)
preds1_8
preds1_8 <- sapply(list(lda1rest_8, lda2rest_8, lda3rest_8, lda4rest_8, lda5rest_8),
predict, newdata = data78[, 2:8])
preds1_8 <- cbind(rowSums(preds1_8 == "Other"), rowSums(preds1_8 == "Hylobates"), rowSums(preds1_8 == "Pongo"),
rowSums(preds1_8 == "Pan"), rowSums(preds1_8 == "Gorilla"), rowSums(preds1_8 == "Homo"))
preds1_8
which(c(1,1,0,0,0)==1)
preds1_8 <- sapply(list(lda1rest_8, lda2rest_8, lda3rest_8, lda4rest_8, lda5rest_8),
predict, newdata = data78[, 2:8])
preds1_8 <- cbind(rowSums(preds1_8 == "Hylobates"), rowSums(preds1_8 == "Pongo"), rowSums(preds1_8 == "Pan"),
rowSums(preds1_8 == "Gorilla"), rowSums(preds1_8 == "Homo"))
vote <- function(x) {
if (length(which(x == max(x))) > 1) {
"Ambi"
} else if(sum(x) == 0) {
"Ambi"
} else {
which(x == max(x))
}
}
preds1_8 <- sapply(list(lda1rest_8, lda2rest_8, lda3rest_8, lda4rest_8, lda5rest_8),
predict, newdata = data78[, 2:8])
preds1_8 <- cbind(rowSums(preds1_8 == "Hylobates"), rowSums(preds1_8 == "Pongo"), rowSums(preds1_8 == "Pan"),
rowSums(preds1_8 == "Gorilla"), rowSums(preds1_8 == "Homo"))
preds1_8
preds1_8 <- as.vector(apply(preds1_8, 1, vote))
preds1_8
preds1_8 <- sapply(list(lda1rest_8, lda2rest_8, lda3rest_8, lda4rest_8, lda5rest_8),
predict, newdata = data78[, 2:8])
preds1_8 <- cbind(rowSums(preds1_8 == "Hylobates"), rowSums(preds1_8 == "Pongo"), rowSums(preds1_8 == "Pan"),
rowSums(preds1_8 == "Gorilla"), rowSums(preds1_8 == "Homo"))
vote <- function(x) {
if (length(which(x == max(x))) > 1) {
"Ambi"
} else if(sum(x) == 0) {
"Ambi"
} else {
genera[which(x == max(x))]
}
}
preds1_8 <- as.vector(apply(preds1_8, 1, vote))
genera <- c("Hylobates", "Pongo", "Pan", "Gorilla", "Homo")
preds1_8 <- as.vector(apply(preds1_8, 1, vote))
preds1_8
confusionMatrix(data = preds1_8, reference = data78[,9])
class(data78[,9])
factor(data78[,9])
factor(data78[,9], c(genera, "Ambi"))
confusionMatrix(data = preds1_8, reference = factor(data78[,9], c(genera, "Ambi")))
data78[preds1_8 == "Ambi", ]
2 == (1|2)
12_8 <- data78[, 9] == genera[1] | data78[, 9] == genera[2]
12_8 <- data78[, 9] == genera[1] | data78[, 9] == genera[2]
pos12_8 <- data78[, 9] == genera[1] | data78[, 9] == genera[2]
dane[pos12_8,9]
dane78[pos12_8,9]
data78[pos12_8,9]
preds1_8 <- sapply(list(lda12_8, lda13_8, lda14_8, lda15_8, lda23_8, lda24_8, lda25_8, lda34_8,
lda35_8, lda45_8), predict, newdata = data78[, 2:8])
pos12_8 <- data78[, 9] == genera[1] | data78[, 9] == genera[2]
pos13_8 <- data78[, 9] == genera[1] | data78[, 9] == genera[3]
pos14_8 <- data78[, 9] == genera[1] | data78[, 9] == genera[4]
pos15_8 <- data78[, 9] == genera[1] | data78[, 9] == genera[5]
pos23_8 <- data78[, 9] == genera[2] | data78[, 9] == genera[3]
pos24_8 <- data78[, 9] == genera[2] | data78[, 9] == genera[4]
pos25_8 <- data78[, 9] == genera[2] | data78[, 9] == genera[5]
pos34_8 <- data78[, 9] == genera[3] | data78[, 9] == genera[4]
pos35_8 <- data78[, 9] == genera[3] | data78[, 9] == genera[5]
pos45_8 <- data78[, 9] == genera[4] | data78[, 9] == genera[5]
lda12_8 <- train(x = data[pos12_8, 2:8], y = as.factor(data[pos12_8,9]), method = "lda")
lda12_8 <- train(x = data78[pos12_8, 2:8], y = as.factor(data78[pos12_8,9]), method = "lda")
lda13_8 <- train(x = data78[pos13_8, 2:8], y = as.factor(data78[pos13_8,9]), method = "lda")
lda14_8 <- train(x = data78[pos14_8, 2:8], y = as.factor(data78[pos14_8,9]), method = "lda")
lda15_8 <- train(x = data78[pos15_8, 2:8], y = as.factor(data78[pos15_8,9]), method = "lda")
lda23_8 <- train(x = data78[pos23_8, 2:8], y = as.factor(data78[pos23_8,9]), method = "lda")
lda24_8 <- train(x = data78[pos24_8, 2:8], y = as.factor(data78[pos24_8,9]), method = "lda")
lda25_8 <- train(x = data78[pos25_8, 2:8], y = as.factor(data78[pos25_8,9]), method = "lda")
lda34_8 <- train(x = data78[pos34_8, 2:8], y = as.factor(data78[pos34_8,9]), method = "lda")
lda35_8 <- train(x = data78[pos35_8, 2:8], y = as.factor(data78[pos35_8,9]), method = "lda")
lda45_8 <- train(x = data78[pos45_8, 2:8], y = as.factor(data78[pos45_8,9]), method = "lda")
preds2_8 <- sapply(list(lda12_8, lda13_8, lda14_8, lda15_8, lda23_8, lda24_8, lda25_8, lda34_8,
lda35_8, lda45_8), predict, newdata = data78[, 2:8])
preds2_8
preds2_8 <- cbind(rowSums(preds2_8 == "Hylobates"), rowSums(preds2_8 == "Pongo"), rowSums(preds2_8 == "Pan"),
rowSums(preds2_8 == "Gorilla"), rowSums(preds2_8 == "Homo"))
preds2_8 <- as.vector(apply(preds2_8, 1, vote))
preds2_8
confusionMatrix(data = preds2_8, reference = factor(data78[,9], c(genera, "Ambi")))
data78[preds1_8 == "Ambi", ]
data78[preds2_8 == "Ambi", ]
confusionMatrix(data = preds2_8, reference = factor(data78[,9], c(genera, "Ambi")))
confusionMatrix(data = preds1_8, reference = factor(data78[,9], c(genera, "Ambi")))
library(xtable)
xtable(summary(lm2))
library(readxl)
data2 <- read_xlsx(path = "bodyfat2.xlsx")
data2 <- data2[, -1]
lm2 <- lm(bodyfat ~ ., data = data2)
xtable(summary(lm2))
library(shiny)
runApp('D:/10 Data Science Capstone/Data-Science-Capstone/Shiny/TextPred')
runApp('D:/10 Data Science Capstone/Data-Science-Capstone/Shiny/TextPred')
runApp('D:/10 Data Science Capstone/Data-Science-Capstone/Shiny/TextPred')
runApp('D:/10 Data Science Capstone/Data-Science-Capstone/Shiny/TextPred')
runApp('D:/10 Data Science Capstone/Data-Science-Capstone/Shiny/TextPred')
runApp('D:/10 Data Science Capstone/Data-Science-Capstone/Shiny/TextPred')
runApp('D:/10 Data Science Capstone/Data-Science-Capstone/Shiny/TextPred')
length("awhfesuiaidw")
length("awhfesuiaidw awfwdadaa")
paste("awhfesuiaidw awfwdadaa")
paste("awhfesuiaidw awfwdadaa", sep = "")
paste("awhfesuiaidw awfwdadaa", sep = "--")
paste("awhfesuiaidw awfwdadaa", sep = " ")
paste("awhfesuiaidw awfwdadaa", sep = " ", collapse = "---")
runApp('D:/10 Data Science Capstone/Data-Science-Capstone/Shiny/TextPred')
setwd("D:/10 Data Science Capstone/Data-Science-Capstone/Shiny/TextPred")
install.packages("tm")
runApp()
runApp()
runApp()
## R function for cleaning text files
## Requires the tm package to be loaded
clean <- function(textOrPath, isText = TRUE) {
if(!isText) {
# Reading
textCon <- file(textOrPath, encoding = "UTF-8", open = "rb")
textCorpus <- readLines(textCon, skipNul = TRUE)
textCorpus <- Corpus(VectorSource(textCorpus))
} else {
textCorpus <- Corpus(VectorSource(textOrPath))
}
# Conversion of UTF-8 artifacts to ASCII
textCorpus <- tm_map(textCorpus, content_transformer(function(x) iconv(x, to="ASCII", sub = "'")))
textCorpus <- tm_map(textCorpus, content_transformer(function(x) gsub(pattern = "(''|''')", replacement = "'", x)))
# Removing stopwords, numbers and enforcing lowercase
textCorpus <- tm_map(textCorpus, content_transformer(tolower))
textCorpus <- tm_map(textCorpus, removeWords, stopwords("english"))
textCorpus <- tm_map(textCorpus, content_transformer(removeNumbers))
# A substitution for apostrophes to preserve contractions
textCorpus <- tm_map(textCorpus, content_transformer(function(x) gsub(pattern = "'t ", replacement = "TTTT ", x)))
textCorpus <- tm_map(textCorpus, content_transformer(function(x) gsub(pattern = "'ll ", replacement = "LLLL ", x)))
textCorpus <- tm_map(textCorpus, content_transformer(function(x) gsub(pattern = "'ve ", replacement = "VVVV ", x)))
textCorpus <- tm_map(textCorpus, content_transformer(function(x) gsub(pattern = "'d ", replacement = "DDDD ", x)))
textCorpus <- tm_map(textCorpus, content_transformer(function(x) gsub(pattern = "'m ", replacement = "MMMM ", x)))
textCorpus <- tm_map(textCorpus, content_transformer(function(x) gsub(pattern = "'s ", replacement = "SSSS ", x)))
# Removing other punctutation, profanity and URLs
textCorpus <- tm_map(textCorpus, content_transformer(removePunctuation))
profanityList <- readLines("D:/10 Data Science Capstone/Data-Science-Capstone/profanity_list.txt")
textCorpus <- tm_map(textCorpus, removeWords, profanityList)
removeURLs <- function(x) gsub(pattern = "http[[:alnum:]]*", replacement = " ", x = x)
textCorpus <- tm_map(textCorpus, content_transformer(removeURLs))
# Restoring apostrophes
textCorpus <- tm_map(textCorpus, content_transformer(function(x) gsub(pattern = "TTTT", replacement = "'t ", x)))
textCorpus <- tm_map(textCorpus, content_transformer(function(x) gsub(pattern = "LLLL", replacement = "'ll ", x)))
textCorpus <- tm_map(textCorpus, content_transformer(function(x) gsub(pattern = "VVVV", replacement = "'ve ", x)))
textCorpus <- tm_map(textCorpus, content_transformer(function(x) gsub(pattern = "DDDD", replacement = "'d ", x)))
textCorpus <- tm_map(textCorpus, content_transformer(function(x) gsub(pattern = "MMMM", replacement = "'m ", x)))
textCorpus <- tm_map(textCorpus, content_transformer(function(x) gsub(pattern = "SSSS", replacement = "'s ", x)))
# Removing 1-chararacter words left after the above manipulations
textCorpus <- tm_map(textCorpus, content_transformer(function(x) gsub(pattern = "\\s[a-z]\\s([a-z]\\s)*",
replacement = "", x)))
# Removing whitespaces, important to put it at the end
textCorpus <- tm_map(textCorpus, stripWhitespace)
if(!isText) {
# Saving to file
save(textCorpus, file = gsub(pattern = "\\.txt", replacement = "_refined\\.RData", x = textOrPath))
}
# Returning refined text
textCorpus
}
clean("wadiudawi awduaDDAWNAW ./]]")
clean("wadiudawi awduaDDAWNAW ./]]")[[1]]
a <- clean("wadiudawi awduaDDAWNAW ./]]")
a$`1`
a
print(a)
display(a)
as.character(a)
a
a$`1`
a$2
a$1
a[[1]]
a[[2]]
a[[1]][[1]]
runApp()
